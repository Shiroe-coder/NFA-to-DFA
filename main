import sys
from os import popen
class Automata:
#định nghĩa một Automata
	def __init__(self, language = set(['0', '1'])):
		self.states = set()
		self.startstate = None
		self.finalstates = []
		self.transitions = dict()
		self.language = language
	@staticmethod
	def epsilon():
		return ":e:"
	def setstartstate(self, state):
		self.startstate = state
		self.states.add(state)
	def addfinalstates(self, state):
		if isinstance(state, int):
			state = [state]
		for s in state:
			if s not in self.finalstates:
				self.finalstates.append(s)
	def addtransition(self, fromstate, tostate, inp):
		if isinstance(inp, str):
			inp = set([inp])
		self.states.add(fromstate)
		self.states.add(tostate)
		if fromstate in self.transitions:
			if tostate in self.transitions[fromstate]:
				self.transitions[fromstate][tostate] = self.transitions[fromstate][tostate].union(inp)
			else:
				self.transitions[fromstate][tostate] = inp
		else:
			self.transitions[fromstate] = {tostate : inp}

	def addtransition_dict(self, transitions):
		for fromstate, tostates in transitions.items():
			for state in tostates:
				self.addtransition(fromstate, state, tostates[state])
	def display(self):
		print ("Tap cac trang thai:", self.states)
		print ("Trang thai bat dau: ", self.startstate)
		print ("Trang thai ket thuc:", self.finalstates)
		print ("Bang ham chuyen trang thai:")
		for fromstate, tostates in self.transitions.items():
			for state in tostates:
				for char in tostates[state]:
					print (" ",fromstate, "->", state, "tren '"+char+"'",)

	def newBuildFromNumber(self, startnum):
		translations = {}
		for i in list(self.states):
			translations[i] = startnum
			startnum += 1
		rebuild = Automata(self.language)
		rebuild.setstartstate(translations[self.startstate])
		rebuild.addfinalstates(translations[self.finalstates[0]])
		for fromstate, tostates in self.transitions.items():
			for state in tostates:
				rebuild.addtransition(translations[fromstate], translations[state], tostates[state])
		return [rebuild, startnum]

class BuildAutomata:
# lớp xây dựng cấu trúc cơ bản của NFAe
	@staticmethod
	def basicstruct(inp):
		state1 = 1
		state2 = 2
		basic = Automata()
		basic.setstartstate(state1)
		basic.addfinalstates(state2)
		basic.addtransition(1, 2, inp)
		return basic
	@staticmethod
	def plusstruct(a, b):
		[a, m1] = a.newBuildFromNumber(2)
		[b, m2] = b.newBuildFromNumber(m1)
		state1 = 1
		state2 = m2
		plus = Automata()
		plus.setstartstate(state1)
		plus.addfinalstates(state2)
		plus.addtransition(plus.startstate, a.startstate, Automata.epsilon())
		plus.addtransition(plus.startstate, b.startstate, Automata.epsilon())
		plus.addtransition(a.finalstates[0], plus.finalstates[0], Automata.epsilon())
		plus.addtransition(b.finalstates[0], plus.finalstates[0], Automata.epsilon())
		plus.addtransition_dict(a.transitions)
		plus.addtransition_dict(b.transitions)
		return plus
	@staticmethod
	def dotstruct(a, b):
		[a, m1] = a.newBuildFromNumber(1)
		[b, m2] = b.newBuildFromNumber(m1)
		state1 = 1
		state2 = m2-1
		dot = Automata()
		dot.setstartstate(state1)
		dot.addfinalstates(state2)
		dot.addtransition(a.finalstates[0], b.startstate, Automata.epsilon())
		dot.addtransition_dict(a.transitions)
		dot.addtransition_dict(b.transitions)
		return dot
	@staticmethod
	def starstruct(a):
		[a, m1] = a.newBuildFromNumber(2)
		state1 = 1
		state2 = m1
		star = Automata()
		star.setstartstate(state1)
		star.addfinalstates(state2)
		star.addtransition(star.startstate, a.startstate, Automata.epsilon())
		star.addtransition(star.startstate, star.finalstates[0], Automata.epsilon())
		star.addtransition(a.finalstates[0], star.finalstates[0], Automata.epsilon())
		star.addtransition(a.finalstates[0], a.startstate, Automata.epsilon())
		star.addtransition_dict(a.transitions)
		return star

class BTCQ2NFAe:
# xây dựng NFAe từ biểu thức chính quy đã cho
	def __init__(self, regex):
		self.star = '*'
		self.plus = '+'
		self.dot = '.'
		self.openingBracket = '('
		self.closingBracket = ')'
		self.operators = [self.plus, self.dot]
		self.regex = regex
		self.alphabet = [chr(i) for i in range(65,91)]
		self.alphabet.extend([chr(i) for i in range(97,123)])
		self.alphabet.extend([chr(i) for i in range(48,58)])
		self.buildNFA()
	def getNFA(self):
		return self.nfa
	def displayNFA(self):
		self.nfa.display()
	def buildNFA(self):
		language = set()
		self.stack =[]
		self.Automata = []
		previous = '::e::'
		for char in self.regex:
			if char in self.alphabet:
				language.add(char)
				if previous != self.dot and (previous in self.alphabet or  previous in [self.closingBracket,self.star]):
					self.addOperatorToStack(self.dot)
				self.Automata.append(BuildAutomata.basicstruct(char))
			elif char == self.openingBracket:
				if previous != self.dot and (previous in self.alphabet or  previous in [self.closingBracket,self.star]):
					self.addOperatorToStack(self.dot)
				self.stack.append(char)
			elif char == self.closingBracket:
				if previous in self.operators:
					raise BaseException('Loi xu ly %s', char)
				while (1):
					if len(self.stack) ==0:
						raise BaseException('Loi xu ly %s',char)
					o = self.stack.pop()
					if o == self.openingBracket:
						break
					elif o in self.operators:
						self.processOperator(o)
			elif char == self.star:
				if previous in self.operators or previous == self.openingBracket or previous == self.star:
					raise BaseException('Loi xu ly %s sau %s' , char,previous)
				self.processOperator(char)
			elif char in self.operators:
				if previous in self.operators or previous == self.openingBracket:
					raise BaseException('Loi xu ly %s sau %s' , char,previous)
				else:
					self.addOperatorToStack(char)
			else:
				raise BaseException('Loi xu ly %s sau' , char)
			previous = char
		while len(self.stack) !=0:
			op = self.stack.pop()
			self.processOperator(op)
		if len(self.Automata)>1:
			print(self.Automata)
			raise BaseException('BTCQ khong duoc phan tich dung' )
		self.nfa = self.Automata.pop()
		self.nfa.language = language
	def addOperatorToStack(self,char):
		while (1):
			if len(self.stack) ==0:
				break
			top  = self.stack[len(self.stack)-1]
			if top == self.openingBracket:
				break
			if top == char or top == self.dot:
				op = self.stack.pop()
				self.processOperator(op)
			else:
				break
		self.stack.append(char)
	def processOperator(self,operator):
		if len(self.Automata) ==0:
			raise BaseException('loi xu ly %s',operator)
		if operator == self.star:
			a = self.Automata.pop()
			self.Automata.append(BuildAutomata.starstruct(a))
		elif operator in self.operators:
			if len(self.Automata) <2 :
				raise BaseException('loi xu ly toan tu , khong du hang %s',operator)
			a = self.Automata.pop()
			b = self.Automata.pop()
			if operator == self.plus:
				self.Automata.append(BuildAutomata.plusstruct(b,a))
			#else operator == self.dot:
			#	self.Automata.append(BuildAutomata.dotstruct(b,a))

class DFAfromNFA:
	def __init__(self,nfa):
		self.buildDFA(nfa)

	def getDFA(self):
		return self.dfa 

	def displayDFA(self):
		self.dfa.display()

	def buildDFA(self,nfa):
		allstates = dict()
		eclose = dict()
		count = 1
		state1 = nfa.getEClose(nfa.startstate)
		eclose[nfa.startstate] = state1
		dfa = Automata(nfa.language)
		dfa.setstartstate(count)
		states = [[state1,count]]
		allstates[count] = state1
		count +=1
		while  len(states) !=0:
			[state,fromindex] = states.pop()
			for char in dfa.language:
				trstates = nfa.gettransitions(state,char)
				for s in list(trstates)[:]:
					if s not in eclose:
						eclose[s] = nfa.getEClose(s)
					trstates = trstates.union(eclose[s])
				if len(trstates) !=0:
					if trstates not in allstates.values():
						states.append([trstate,count])
						allstates[count] = trstates
						toindex = count
						count +=1
					else:
						toindex = [k for k, v in allstates.iteritems() if  v== trstates][0]
					dfa.addtransition(fromindex,toindex,char)
		for value, state in allstates.iteritems():
			if nfa.finalstates[0] in state:
				dfa.addfinalstates(value)
		self.dfa = dfa
	def acceptsString(self,string):
		currentstate = self.dfa.startstate
		for ch in string:
			if ch == ':e:':
				continue
			st = list(self.fa.gettransitions(currentstate,ch))
			if len(st) ==0:
				return False 
			currentstate = st[0]
		if currentstate in self.dfa.finalstates:
			return True 
		return False
	def gettransition(self,state,key):
		if isinstance(state,int):
			state = [state]
		trstates = set()
		for st in state:
			if st in self.transitions:
				for tns in self.stransitions[st]:
					if key in self.transitions[st][tns]:
						trstates.add(tns)
		return trstates
	def getEClose(self,findstates):
		allstates = set()
		states = set([findstates])
		while len(states) !=0:
			state = states.pop()
			allstates.add(state)
			if state in self.transitions:
				for tns in self.transitions[state]:
					if Automata.epsilon() in self.stransitions[states][tns] :
						states.add(tns)
		return allstates
'''	
def main():
	inp = '01*+1'
	if len(sys.argv)>1:
		inp = sys.argv[1]
	print('bieu thuc chinh quy: ',inp)
	nfaObj = BTCQ2NFAe(inp)
	nfa = nfaObj.getNFA()
	print("\n NFA: ",nfaObj.displayNFA())
'''
def main():
	inp = '01*1'
	if len(sys.argv)>1:
		inp = sys.argv[1]
	print('bieu thuc chinh quy: ',inp)
	dfa = DFAfromNFA(inp)
	d = dfa.getDFA()
	print("\n DFA: ",dfa.displayDFA())

if __name__ == '__main__':
	main()
	'''
	try:
		main()
	except BaseException as e:
		print('\n Failure',e)
	'''
